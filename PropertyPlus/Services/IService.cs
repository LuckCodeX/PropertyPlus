using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using PropertyPlus.Models;

namespace PropertyPlus.Services
{
    public interface IService
    {
        admin GetAdminByToken(TokenModel token);
        admin LoginAdmin(AdminModel model);
        List<blog> GetAllBlog();
        void Dispose();
        blog GetBlogById(int id);
        void SaveBlog(blog blog);
        blog_content GetBlogContentById(int id);
        void SaveBlogContent(blog_content content);
        void DeleteBlog(int id);
        BlogContentModel ConvertBlogContentToModel(blog_content blogContent);
        List<blog> SearchBlogList(int type, int language, string search);
        List<slide> GetListSlideByType(int type);
        slide GetSlideById(int id);
        void SaveSlide(slide slide);
        slide GetRandomSlideByType(int type);
        user_account Login(UserAccountModel model);
        user_profile GetUserProfileByEmail(string email);
        void SaveUserProfile(user_profile userProfile);
        void SaveUserAccount(user_account userAcc);
        user_profile GetUserProfileById(int id);
        user_profile GetActiveUserProfileById(int id);
        string SaveImage(string path, string imageName, string image);
        user_account GetUserAccountByUserProfileId(int userProfileId);
        //user_visit GetUserVisitByUserProfileIdAndApartmentId(int userProfileId, int apartmentId);
        void SaveUserVisit(user_visit userVisit);
        void DeleteUserVisit(user_visit userVisit);
        //List<apartment> GetListVisitApartmentByUserProfileId(int userProfileId);
        List<user_profile> SearchUserProfile(string search);
        void DeleteAccount(int id);
        List<project> SearchProjectList(string search);
        ProjectContentModel ConvertProjectContentToModel(project_content model);
        project GetProjectById(int id);
        void SaveProject(project project);
        project_content GetProjectContentById(int id);
        void SaveProjectContent(project_content content);
        List<apartment> GetListApartmentByUserProfileId(int userProfileId);
        void SaveApartment(apartment apartment);
        void SaveApartmentContent(apartment_content apartmentContent);
        void SaveApartmentImage(aparment_image apartmentImage);
        void SaveApartmentFacility(apartment_facility apartmentFacility);
        List<project> GetAllProject();
        List<facility> GetAllFacility();
        FacilityContentModel ConvertFacilityContentToModel(facility_content model);
        facility GetFacilityById(int id);
        void SaveFacility(facility facility);
        facility_content GetFacilityContentById(int id);
        void SaveFacilityContent(facility_content content);
        List<apartment> SearchListApartment(FilterModel filter);
        apartment GetActiveApartmentById(int id);
        List<user_visit> GetListUserVisitByUserProfileId(int userProfileId);
        user_visit GetUserVisitById(int id);
        List<apartment> SearchListApartmentByUserProfileId(int status, int userProfileId);
        apartment GetApartmentById(int id);
        user_social GetUserSocialByEmailAndType(string email, int type);
        void SaveUserSocial(user_social model);
        void DeleteApartmentImage(aparment_image item);
        void DeleteApartmentFacility(apartment_facility item);
        apartment_content GetApartmentContentById(int id);
        apartment_content GetApartmentContentByApartmentIdAndLanguage(int apartmentId, int language);
        List<facility> GetAllFacilities();
        List<apartment> GetSimilarApartment(ApartmentModel model);
        user_visit_item GetUserVisitItemByUserProfileIdAndApartmentId(int userProfileId, int apartmentId);
        void SaveUserVisitItem(user_visit_item visitItem);
        List<user_visit_item> GetListUserVisitItemByUserProfileId(int userProfileId);
        user_visit_item GetUserVisitItemByIdAndUserProfileId(int id, int userProfileId);
        void DeleteUserVisitItem(user_visit_item userVisit);
    }
}
